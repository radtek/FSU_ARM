/* scStub.h
   Generated by gSOAP 2.8.28 from sc.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <deque>
#include <list>
#include <vector>
#include <set>

#ifndef scStub_H
#define scStub_H
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20828
# error "GSOAP VERSION 20828 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace sc {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs, and Unions                                               *
 *                                                                            *
\******************************************************************************/

struct sc1__invokeResponse;	/* sc.h:253 */
struct sc1__invoke;	/* sc.h:253 */

/* sc.h:253 */
#ifndef SOAP_TYPE_sc_sc1__invokeResponse
#define SOAP_TYPE_sc_sc1__invokeResponse (14)
/* sc1:invokeResponse complex type: */
struct sc1__invokeResponse
{
public:
	std::string _invokeReturn;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of XSD type xsd:string */
public:
	int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_sc_sc1__invokeResponse */
	         sc1__invokeResponse();
	friend SOAP_FMAC1 sc1__invokeResponse * SOAP_FMAC2 soap_instantiate_sc1__invokeResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* sc.h:253 */
#ifndef SOAP_TYPE_sc_sc1__invoke
#define SOAP_TYPE_sc_sc1__invoke (15)
/* sc1:invoke complex type: */
struct sc1__invoke
{
public:
	std::string _xmlData;	/* required element of XSD type xsd:string */
public:
	int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_sc_sc1__invoke */
	         sc1__invoke();
	friend SOAP_FMAC1 sc1__invoke * SOAP_FMAC2 soap_instantiate_sc1__invoke(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* sc.h:265 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_sc_SOAP_ENV__Header
#define SOAP_TYPE_sc_SOAP_ENV__Header (16)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_sc_SOAP_ENV__Header */
	         SOAP_ENV__Header();
	friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* sc.h:265 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_sc_SOAP_ENV__Code
#define SOAP_TYPE_sc_SOAP_ENV__Code (17)
/* Type SOAP_ENV__Code is a recursive data type (in)directly referencing itself through its (base) class members */
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of XSD type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of XSD type SOAP-ENV:Code */
public:
	int soap_type() const { return 17; } /* = unique type id SOAP_TYPE_sc_SOAP_ENV__Code */
	         SOAP_ENV__Code();
	friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* sc.h:265 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_sc_SOAP_ENV__Detail
#define SOAP_TYPE_sc_SOAP_ENV__Detail (19)
/* SOAP-ENV:Detail complex type: */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below)
	   WARNING: do not create a cyclic data structure graph throught this element unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
	void *fault;	/* transient (not serialized) */
public:
	int soap_type() const { return 19; } /* = unique type id SOAP_TYPE_sc_SOAP_ENV__Detail */
	         SOAP_ENV__Detail();
	friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* sc.h:265 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_sc_SOAP_ENV__Reason
#define SOAP_TYPE_sc_SOAP_ENV__Reason (22)
/* SOAP-ENV:Reason complex type: */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of XSD type xsd:string */
public:
	int soap_type() const { return 22; } /* = unique type id SOAP_TYPE_sc_SOAP_ENV__Reason */
	         SOAP_ENV__Reason();
	friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* sc.h:265 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_sc_SOAP_ENV__Fault
#define SOAP_TYPE_sc_SOAP_ENV__Fault (23)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of XSD type xsd:QName */
	char *faultstring;	/* optional element of XSD type xsd:string */
	char *faultactor;	/* optional element of XSD type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of XSD type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of XSD type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of XSD type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of XSD type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of XSD type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of XSD type SOAP-ENV:Detail */
public:
	int soap_type() const { return 23; } /* = unique type id SOAP_TYPE_sc_SOAP_ENV__Fault */
	         SOAP_ENV__Fault();
	friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* sc.h:1 */
#ifndef SOAP_TYPE_sc__QName
#define SOAP_TYPE_sc__QName (5)
typedef char *_QName;
#endif

/* sc.h:1 */
#ifndef SOAP_TYPE_sc__XML
#define SOAP_TYPE_sc__XML (6)
typedef char *_XML;
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace sc


#endif

/* End of scStub.h */
