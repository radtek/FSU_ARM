/* scSCServiceSoapBindingProxy.cpp
   Generated by gSOAP 2.8.28 from sc.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "scSCServiceSoapBindingProxy.h"

namespace sc {

SCServiceSoapBindingProxy::SCServiceSoapBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	SCServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

SCServiceSoapBindingProxy::SCServiceSoapBindingProxy(const SCServiceSoapBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

SCServiceSoapBindingProxy::SCServiceSoapBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	SCServiceSoapBindingProxy_init(_soap->imode, _soap->omode);
}

SCServiceSoapBindingProxy::SCServiceSoapBindingProxy(const char *url)
{	this->soap = soap_new();
	this->soap_own = true;
	SCServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

SCServiceSoapBindingProxy::SCServiceSoapBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	SCServiceSoapBindingProxy_init(iomode, iomode);
}

SCServiceSoapBindingProxy::SCServiceSoapBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	SCServiceSoapBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

SCServiceSoapBindingProxy::SCServiceSoapBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	SCServiceSoapBindingProxy_init(imode, omode);
}

SCServiceSoapBindingProxy::~SCServiceSoapBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void SCServiceSoapBindingProxy::SCServiceSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"sc1", "http://SCService.chinatowercom.com", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
SCServiceSoapBindingProxy *SCServiceSoapBindingProxy::copy()
{	SCServiceSoapBindingProxy *dup = SOAP_NEW_COPY(SCServiceSoapBindingProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

SCServiceSoapBindingProxy& SCServiceSoapBindingProxy::operator=(const SCServiceSoapBindingProxy& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void SCServiceSoapBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void SCServiceSoapBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
//	soap_set_mode(this->soap, SOAP_C_MBSTRING);
	SCServiceSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void SCServiceSoapBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *SCServiceSoapBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *SCServiceSoapBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *SCServiceSoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *SCServiceSoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int SCServiceSoapBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int SCServiceSoapBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void SCServiceSoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void SCServiceSoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *SCServiceSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int SCServiceSoapBindingProxy::invoke(const char *endpoint, const char *soap_action, std::string _xmlData, std::string &_invokeReturn)
{	struct soap *soap = this->soap;
	struct sc1__invoke soap_tmp_sc1__invoke;
	struct sc1__invokeResponse *soap_tmp_sc1__invokeResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.2.3:8080";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp_sc1__invoke._xmlData = _xmlData;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_sc1__invoke(soap, &soap_tmp_sc1__invoke);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_sc1__invoke(soap, &soap_tmp_sc1__invoke, "sc1:invoke", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_sc1__invoke(soap, &soap_tmp_sc1__invoke, "sc1:invoke", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_invokeReturn)
		return soap_closesock(soap);
	soap_default_std__string(soap, &_invokeReturn);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_sc1__invokeResponse = soap_get_sc1__invokeResponse(soap, NULL, "", NULL);
	if (!soap_tmp_sc1__invokeResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_invokeReturn = soap_tmp_sc1__invokeResponse->_invokeReturn;
	return soap_closesock(soap);
}

} // namespace sc

/* End of client proxy code */
